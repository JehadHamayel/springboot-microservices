services:
  db:
    ports:
      - 5432:5432
    container_name: postgresql_container
    image: postgres:latest
    environment:
      - POSTGRES_DB=user_post_DB
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123!@#OP
    volumes:
      - C:\user_post_DB:/var/lib/postgresql/data
    restart: always
  web_post:
    image: jehad950/post_rest_api:v1.0
    build: post
    container_name: post_rest_api_container
    ports:
      - 8080:8080
    environment:
      db-url: jdbc:postgresql://db:5432/user_post_DB
      db-user: postgres
      db-password: 123!@#OP
    depends_on:
      - db
    restart: always
  web_user:
    image: jehad950/user_rest_api:v1.0
    build: user
    container_name: user_rest_api_container
    ports:
      - 8090:8090
    environment:
      db-url: jdbc:postgresql://db:5432/user_post_DB
      db-user: postgres
      db-password: 123!@#OP
    depends_on:
      - db
    restart: always

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1

#  docker compose -f .\docker-compose.yaml up -d
#  docker-compose up
#  docker-compose down

#  docker tag jehad950/post_rest_api:v1.0 jehad950/post_rest_api:v1.0
#  docker push jehad950/post_rest_api:v1.0

#  docker tag jehad950/user_rest_api:v1.0 jehad950/user_rest_api:v1.0
#  docker push jehad950/user_rest_api:v1.0

###Push All Images from Docker Compose (docker-compose.yaml)
#  docker-compose push

### Verify the Push
#  docker-compose images
#  docker-compose ps
#  docker-compose logs
#  docker-compose logs -f
#  docker search jehad950/post_rest_api
#  docker search jehad950/user_rest_api

#https://github:com/conduktor/kafka-stack-docker-compose/tree/master: